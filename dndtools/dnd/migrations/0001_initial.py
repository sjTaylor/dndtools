# Generated by Django 2.1.7 on 2019-03-19 03:22

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import dnd.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='CharacterClass',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=64)),
                ('slug', models.SlugField(max_length=64, unique=True)),
                ('prestige', models.BooleanField()),
                ('short_description', models.TextField(blank=True, help_text='Textile enabled!')),
                ('short_description_html', models.TextField(blank=True, editable=False)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='CharacterClassVariant',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('page', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('skill_points', models.PositiveSmallIntegerField(blank=True, help_text='X + Int modifier', null=True)),
                ('requirements', models.TextField(blank=True, help_text='Textile enabled! ONLY other requirements than BAB, Skills, Feats, Races')),
                ('requirements_html', models.TextField(blank=True, editable=False)),
                ('required_bab', models.PositiveSmallIntegerField(blank=True, help_text='Results in Base Attack Bonus: +x', null=True)),
                ('class_features', models.TextField(blank=True, help_text='Textile enabled!')),
                ('class_features_html', models.TextField(blank=True, editable=False)),
                ('hit_die', models.PositiveSmallIntegerField(blank=True, help_text='For d4 write 4 etc.', null=True)),
                ('alignment', models.CharField(blank=True, max_length=256)),
                ('starting_gold', models.CharField(blank=True, help_text='Do NOT use gold from Starting package! That amount is reduced by other equipment used. Check p. 111 in PHB for more info. Do not put in Average gold amount.', max_length=32)),
                ('advancement', models.TextField(blank=True, help_text='Textile enabled! (bit.ly/JigkFt)')),
                ('advancement_html', models.TextField(blank=True, editable=False)),
                ('character_class', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dnd.CharacterClass')),
            ],
            options={
                'ordering': ['character_class__name'],
            },
        ),
        migrations.CreateModel(
            name='CharacterClassVariantRequiresFeat',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('extra', models.CharField(blank=True, max_length=32)),
                ('text_before', models.CharField(blank=True, help_text='Displayed before Feat, no parenthesis! Use to create "or", "and" etc.', max_length=64)),
                ('text_after', models.CharField(blank=True, help_text='Displayed after Feat, no parenthesis! Use to create "or", "and" etc.', max_length=64)),
                ('remove_comma', models.BooleanField(help_text='Removes comma before Feat! Use to create "or", "and" etc.')),
                ('character_class_variant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='required_feats', to='dnd.CharacterClassVariant')),
            ],
        ),
        migrations.CreateModel(
            name='CharacterClassVariantRequiresRace',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('extra', models.CharField(blank=True, max_length=32)),
                ('text_before', models.CharField(blank=True, help_text='Displayed before Race, no parenthesis! Use to create "or", "and" etc.', max_length=64)),
                ('text_after', models.CharField(blank=True, help_text='Displayed after Race, no parenthesis! Use to create "or", "and" etc.', max_length=64)),
                ('remove_comma', models.BooleanField(help_text='Removes comma before Race! Use to create "or", "and" etc.')),
                ('character_class_variant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='required_races', to='dnd.CharacterClassVariant')),
            ],
        ),
        migrations.CreateModel(
            name='CharacterClassVariantRequiresSkill',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ranks', models.PositiveSmallIntegerField()),
                ('extra', models.CharField(blank=True, max_length=32)),
                ('text_before', models.CharField(blank=True, help_text='Displayed before Skill, no parenthesis! Use to create "or", "and" etc.', max_length=64)),
                ('text_after', models.CharField(blank=True, help_text='Displayed after Skill, no parenthesis! Use to create "or", "and" etc.', max_length=64)),
                ('remove_comma', models.BooleanField(help_text='Removes comma before Skill! Use to create "or", "and" etc.')),
                ('character_class_variant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='required_skills', to='dnd.CharacterClassVariant')),
            ],
        ),
        migrations.CreateModel(
            name='Deity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, unique=True)),
                ('slug', models.SlugField(max_length=64, unique=True)),
                ('description', models.TextField(blank=True, help_text='Textile enabled!')),
                ('description_html', models.TextField(blank=True, editable=False)),
                ('alignment', models.CharField(blank=True, help_text='CG, LE, N, ...', max_length=2)),
            ],
            options={
                'verbose_name_plural': 'deities',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='DndEdition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=32)),
                ('system', models.CharField(max_length=16)),
                ('slug', models.SlugField(max_length=32, unique=True)),
                ('core', models.BooleanField()),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Domain',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, unique=True)),
                ('slug', models.SlugField(max_length=64, unique=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='DomainVariant',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('page', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('deities_text', models.CharField(blank=True, help_text='If deities is not an enumeration but some text.', max_length=128)),
                ('requirement', models.CharField(blank=True, max_length=64)),
                ('granted_power', models.TextField(blank=True, help_text='Textile enabled!')),
                ('granted_power_html', models.TextField(blank=True, editable=False)),
                ('granted_power_type', models.CharField(blank=True, help_text='Something like "Su" for supernaturals etc. Leave blank if nothing is in the book.', max_length=8)),
                ('deities', models.ManyToManyField(blank=True, help_text='Also sometimes called "Core domains"', related_name='primary_domains', to='dnd.Deity')),
                ('domain', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dnd.Domain')),
                ('other_deities', models.ManyToManyField(blank=True, related_name='other_domains', to='dnd.Deity')),
            ],
        ),
        migrations.CreateModel(
            name='Feat',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=64)),
                ('description', models.TextField(help_text='Textile enabled!')),
                ('benefit', models.TextField(help_text='Textile enabled!')),
                ('special', models.TextField(blank=True, help_text='Textile enabled!')),
                ('normal', models.TextField(blank=True, help_text='Textile enabled!')),
                ('page', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('slug', models.SlugField(max_length=64)),
                ('description_html', models.TextField(blank=True, editable=False)),
                ('benefit_html', models.TextField(blank=True, editable=False)),
                ('special_html', models.TextField(blank=True, editable=False)),
                ('normal_html', models.TextField(blank=True, editable=False)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='FeatCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32, unique=True)),
                ('slug', models.SlugField(max_length=32, unique=True)),
            ],
            options={
                'verbose_name_plural': 'feat categories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='FeatRequiresFeat',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('additional_text', models.CharField(blank=True, max_length=64)),
                ('required_feat', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='required_by_feats', to='dnd.Feat')),
                ('source_feat', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='required_feats', to='dnd.Feat')),
            ],
        ),
        migrations.CreateModel(
            name='FeatRequiresSkill',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('extra', models.CharField(blank=True, max_length=32)),
                ('min_rank', models.PositiveSmallIntegerField()),
                ('feat', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='required_skills', to='dnd.Feat')),
            ],
        ),
        migrations.CreateModel(
            name='FeatSpecialFeatPrerequisite',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value_1', models.CharField(blank=True, max_length=256)),
                ('value_2', models.CharField(blank=True, max_length=256)),
                ('feat', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dnd.Feat')),
            ],
        ),
        migrations.CreateModel(
            name='Item',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('MUN', 'Mundane Item'), ('MAG', 'Magic Item'), ('ENH', 'Enhancement')], max_length=3)),
                ('name', models.CharField(db_index=True, max_length=64)),
                ('slug', models.SlugField(max_length=64, unique=True)),
                ('page', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('price_gp', models.PositiveIntegerField(blank=True, help_text='Price in gold pieces.', null=True)),
                ('price_bonus', models.PositiveSmallIntegerField(blank=True, help_text='Price as +X bonus (eg. Vorpal is +5 bonus).', null=True)),
                ('item_level', models.PositiveSmallIntegerField(blank=True, help_text='Used in Magic Item Compendium, NOT CASTER LEVEL!', null=True)),
                ('caster_level', models.PositiveSmallIntegerField(blank=True, help_text='Not for Mundane Items.', null=True)),
                ('aura_dc', models.CharField(blank=True, help_text='Not for Mundane Items.', max_length=16)),
                ('weight', models.FloatField(blank=True, help_text='Leave blank for —. Not for Armor and Magic Enhancements.', null=True)),
                ('visual_description', models.TextField(blank=True, help_text='Automatically in italics!')),
                ('description', models.TextField(help_text='Textile enabled!')),
                ('description_html', models.TextField(editable=False)),
                ('cost_to_create', models.CharField(blank=True, help_text='Fill ONLY if you don\'t want cost to be calculated! (50% gold, 1/25 xp, 1/1000 days for regular, "varies" for +x items). Use dash (-) to surpress this field.', max_length=128)),
                ('required_extra', models.CharField(blank=True, help_text='Anything extra in Prerequisites field. No textile!', max_length=64)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ItemActivationType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=64)),
                ('slug', models.SlugField(max_length=64, unique=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ItemAuraType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=64)),
                ('slug', models.SlugField(max_length=64, unique=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ItemProperty',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=64)),
                ('slug', models.SlugField(max_length=64, unique=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ItemSlot',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=64)),
                ('slug', models.SlugField(max_length=64, unique=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Language',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64)),
                ('slug', models.SlugField(max_length=32, unique=True)),
                ('description', models.TextField(blank=True, help_text='Textile enabled!')),
                ('description_html', models.TextField(blank=True, editable=False)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Monster',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=32)),
                ('slug', models.SlugField(max_length=32)),
                ('page', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('hit_dice', models.CharField(help_text='Eg. "1d1+0 (1 hp)"', max_length=32)),
                ('initiative', models.SmallIntegerField()),
                ('armor_class', models.CharField(help_text='Only base AC, not Touch nor FlatFooted, eg. "32 (–1 size, +4 Dex, +19 natural)"', max_length=128)),
                ('touch_armor_class', models.SmallIntegerField(blank=True, null=True)),
                ('flat_footed_armor_class', models.SmallIntegerField(blank=True, null=True)),
                ('base_attack', models.SmallIntegerField()),
                ('grapple', models.SmallIntegerField()),
                ('attack', models.CharField(help_text='Eg. "+3 greatsword +23 melee (3d6+13/19–20) or slam +20 melee (2d8+10)"', max_length=128)),
                ('full_attack', models.CharField(help_text='Eg. "+3 greatsword +23/+18/+13 melee (3d6+13/19–20) or slam +20 melee (2d8+10)"', max_length=128)),
                ('space', models.PositiveSmallIntegerField(choices=[(0, 0), (5, 5), (10, 10), (15, 15), (20, 20), (25, 25), (30, 30), (35, 35), (40, 40), (45, 45), (50, 50), (55, 55), (60, 60)])),
                ('reach', models.PositiveSmallIntegerField(choices=[(0, 0), (5, 5), (10, 10), (15, 15), (20, 20), (25, 25), (30, 30), (35, 35), (40, 40), (45, 45), (50, 50), (55, 55), (60, 60)])),
                ('special_attacks', models.CharField(blank=True, help_text='Eg. "Spell-like abilities, spells"', max_length=256)),
                ('special_qualities', models.CharField(blank=True, help_text='Eg. "Damage reduction 10/evil, darkvision 60 ft., low-light vision, immunity to acid, cold, and petrification, protective aura, regeneration 10, resistance to electricity 10 and fire 10, spell resistance 30, tongues"', max_length=512)),
                ('fort_save', models.SmallIntegerField()),
                ('fort_save_extra', models.CharField(blank=True, help_text='Eg. "+18 against poison"', max_length=32)),
                ('reflex_save', models.SmallIntegerField()),
                ('reflex_save_extra', models.CharField(blank=True, help_text='Eg. "+18 against whatever"', max_length=32)),
                ('will_save', models.SmallIntegerField()),
                ('will_save_extra', models.CharField(blank=True, help_text='Eg. "+18 against illusions"', max_length=32)),
                ('str', models.SmallIntegerField()),
                ('dex', models.SmallIntegerField()),
                ('con', models.SmallIntegerField(blank=True, help_text='Leave blank for undeads', null=True)),
                ('int', models.SmallIntegerField()),
                ('wis', models.SmallIntegerField()),
                ('cha', models.SmallIntegerField()),
                ('environment', models.CharField(blank=True, help_text='Eg. "Any good-aligned plane"', max_length=128)),
                ('organization', models.CharField(blank=True, help_text='Eg. "Solitary or pair"', max_length=128)),
                ('challenge_rating', models.PositiveSmallIntegerField()),
                ('treasure', models.CharField(blank=True, help_text='Eg. "No coins; double goods; standard items"', max_length=128)),
                ('alignment', models.CharField(blank=True, help_text='Eg. "Always good (any)"', max_length=64)),
                ('advancement', models.CharField(blank=True, help_text='Eg. "15–21 HD (Large); 22–42 HD (Huge)"', max_length=64)),
                ('level_adjustment', models.SmallIntegerField(blank=True, null=True)),
                ('description', models.TextField(blank=True, help_text='Textile enabled!')),
                ('description_html', models.TextField(blank=True, editable=False)),
                ('combat', models.TextField(blank=True, help_text='Textile enabled!')),
                ('combat_html', models.TextField(blank=True, editable=False)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='MonsterHasFeat',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('extra', models.CharField(blank=True, max_length=32)),
                ('feat', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dnd.Feat')),
                ('monster', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='feats', to='dnd.Monster')),
            ],
        ),
        migrations.CreateModel(
            name='MonsterHasSkill',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ranks', models.PositiveSmallIntegerField()),
                ('extra', models.CharField(blank=True, max_length=32)),
                ('monster', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='skills', to='dnd.Monster')),
            ],
        ),
        migrations.CreateModel(
            name='MonsterSpeed',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('speed', models.PositiveSmallIntegerField()),
                ('race', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dnd.Monster')),
            ],
        ),
        migrations.CreateModel(
            name='MonsterSubtype',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=32)),
                ('slug', models.SlugField(max_length=32, unique=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='MonsterType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=32)),
                ('slug', models.SlugField(max_length=32, unique=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='NewsEntry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('published', models.DateField()),
                ('title', models.CharField(max_length=64)),
                ('body', models.TextField(help_text='Textile enabled!')),
                ('body_html', models.TextField(editable=False)),
                ('enabled', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name_plural': 'news entries',
                'ordering': ['-published'],
            },
        ),
        migrations.CreateModel(
            name='Race',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=32)),
                ('slug', models.SlugField(max_length=32)),
                ('page', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('str', models.SmallIntegerField(default=0)),
                ('dex', models.SmallIntegerField(default=0)),
                ('con', models.SmallIntegerField(blank=True, default=0, help_text='Leave blank for ---', null=True)),
                ('int', models.SmallIntegerField(default=0)),
                ('wis', models.SmallIntegerField(default=0)),
                ('cha', models.SmallIntegerField(default=0)),
                ('level_adjustment', models.SmallIntegerField(default=0)),
                ('space', models.PositiveSmallIntegerField(choices=[(0, 0), (5, 5), (10, 10), (15, 15), (20, 20), (25, 25), (30, 30), (35, 35), (40, 40), (45, 45), (50, 50), (55, 55), (60, 60)])),
                ('reach', models.PositiveSmallIntegerField(choices=[(0, 0), (5, 5), (10, 10), (15, 15), (20, 20), (25, 25), (30, 30), (35, 35), (40, 40), (45, 45), (50, 50), (55, 55), (60, 60)])),
                ('natural_armor', models.SmallIntegerField(blank=True, help_text='Only if there is any bonus! Omit for no bonus (do not write "0")', null=True)),
                ('racial_hit_dice_count', models.PositiveSmallIntegerField(blank=True, help_text='Number of hit dice, for "6d8 Hit Dice" enter 6', null=True)),
                ('description', models.TextField(blank=True, help_text='Textile enabled! Do not enter Natural AC, Racial Feats, Racial HD nor Languages.')),
                ('description_html', models.TextField(blank=True, editable=False)),
                ('combat', models.TextField(blank=True, help_text='Textile enabled!')),
                ('combat_html', models.TextField(blank=True, editable=False)),
                ('racial_traits', models.TextField(blank=True, help_text='Textile enabled!')),
                ('racial_traits_html', models.TextField(blank=True, editable=False)),
                ('image', models.ImageField(blank=True, help_text='auto-resized to 500px * 500px max, jpeg only plz.', null=True, upload_to=dnd.models.Race.image_filename)),
                ('automatic_languages', models.ManyToManyField(blank=True, related_name='races_with_automatic', to='dnd.Language')),
                ('bonus_languages', models.ManyToManyField(blank=True, related_name='races_with_bonus', to='dnd.Language')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='RaceFavoredCharacterClass',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('extra', models.CharField(blank=True, max_length=32)),
                ('character_class', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dnd.CharacterClass')),
                ('race', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='favored_classes', to='dnd.Race')),
            ],
        ),
        migrations.CreateModel(
            name='RaceSize',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=32)),
                ('order', models.PositiveSmallIntegerField()),
                ('description', models.TextField(blank=True)),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='RaceSpeed',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('speed', models.PositiveSmallIntegerField()),
                ('race', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dnd.Race')),
            ],
        ),
        migrations.CreateModel(
            name='RaceSpeedType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=32)),
                ('extra', models.CharField(blank=True, max_length=32, null=True)),
            ],
            options={
                'ordering': ['name', 'extra'],
            },
        ),
        migrations.CreateModel(
            name='RaceType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=32)),
                ('slug', models.SlugField(max_length=32, unique=True)),
                ('hit_die_size', models.PositiveSmallIntegerField()),
                ('base_attack_type', models.CharField(choices=[('FIG', 'Fighter'), ('CLR', 'Cleric'), ('WIZ', 'Wizard')], max_length=3)),
                ('base_fort_save_type', models.CharField(choices=[('GOOD', 'Good'), ('BAD', 'Bad')], max_length=4)),
                ('base_reflex_save_type', models.CharField(choices=[('GOOD', 'Good'), ('BAD', 'Bad')], max_length=4)),
                ('base_will_save_type', models.CharField(choices=[('GOOD', 'Good'), ('BAD', 'Bad')], max_length=4)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Rule',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=64)),
                ('slug', models.SlugField(max_length=64, unique=True)),
                ('body', models.TextField(help_text='Textile enabled!')),
                ('body_html', models.TextField(editable=False)),
                ('page_from', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('page_to', models.PositiveSmallIntegerField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Rulebook',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=128)),
                ('abbr', models.CharField(max_length=7)),
                ('description', models.TextField(blank=True)),
                ('year', models.CharField(blank=True, max_length=4, null=True)),
                ('published', models.DateField(blank=True, help_text='Use 1 is day is not known and January if month is.', null=True)),
                ('image', models.ImageField(blank=True, help_text='200px * ~250px please.', null=True, upload_to='rulebook')),
                ('official_url', models.URLField(blank=True, max_length=255)),
                ('slug', models.SlugField(max_length=128, unique=True)),
                ('dnd_edition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dnd.DndEdition')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Skill',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, unique=True)),
                ('base_skill', models.CharField(max_length=4)),
                ('slug', models.SlugField(max_length=64, unique=True)),
                ('trained_only', models.BooleanField()),
                ('armor_check_penalty', models.BooleanField()),
                ('required_by_feats', models.ManyToManyField(through='dnd.FeatRequiresSkill', to='dnd.Feat')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='SkillVariant',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('page', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('description', models.TextField(blank=True, help_text='Textile enabled!')),
                ('description_html', models.TextField(blank=True, editable=False)),
                ('check', models.TextField(blank=True, help_text='Textile enabled!')),
                ('check_html', models.TextField(blank=True, editable=False)),
                ('action', models.TextField(blank=True, help_text='Textile enabled!')),
                ('action_html', models.TextField(blank=True, editable=False)),
                ('try_again', models.TextField(blank=True, help_text='Textile enabled!')),
                ('try_again_html', models.TextField(blank=True, editable=False)),
                ('special', models.TextField(blank=True, help_text='Textile enabled!')),
                ('special_html', models.TextField(blank=True, editable=False)),
                ('synergy', models.TextField(blank=True, help_text='Textile enabled!')),
                ('synergy_html', models.TextField(blank=True, editable=False)),
                ('restriction', models.TextField(blank=True, help_text='Textile enabled!')),
                ('restriction_html', models.TextField(blank=True, editable=False)),
                ('untrained', models.TextField(blank=True, help_text='Textile enabled!')),
                ('untrained_html', models.TextField(blank=True, editable=False)),
                ('rulebook', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dnd.Rulebook')),
                ('skill', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dnd.Skill')),
            ],
        ),
        migrations.CreateModel(
            name='SpecialFeatPrerequisite',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, unique=True)),
                ('print_format', models.CharField(max_length=64)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Spell',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('page', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('name', models.CharField(db_index=True, max_length=64)),
                ('slug', models.SlugField(max_length=64)),
                ('verbal_component', models.BooleanField()),
                ('somatic_component', models.BooleanField()),
                ('material_component', models.BooleanField()),
                ('arcane_focus_component', models.BooleanField()),
                ('divine_focus_component', models.BooleanField()),
                ('xp_component', models.BooleanField()),
                ('meta_breath_component', models.BooleanField()),
                ('true_name_component', models.BooleanField()),
                ('extra_components', models.CharField(blank=True, help_text='Extra obscure components like Archon, Eldarin etc. Comma separated.', max_length=256, null=True)),
                ('casting_time', models.CharField(blank=True, max_length=256, null=True)),
                ('range', models.CharField(blank=True, max_length=256, null=True)),
                ('target', models.CharField(blank=True, max_length=256, null=True)),
                ('effect', models.CharField(blank=True, max_length=256, null=True)),
                ('area', models.CharField(blank=True, max_length=256, null=True)),
                ('duration', models.CharField(blank=True, max_length=256, null=True)),
                ('saving_throw', models.CharField(blank=True, max_length=128, null=True)),
                ('spell_resistance', models.CharField(blank=True, max_length=64, null=True)),
                ('description', models.TextField(help_text='Textile enabled!')),
                ('description_html', models.TextField(blank=True, editable=False)),
                ('corrupt_component', models.BooleanField(default=False, help_text='Corrupt spells are special spells described in p. 77-78 of Book of Vile Darkness.')),
                ('corrupt_level', models.PositiveSmallIntegerField(blank=True, help_text='Level of corrupt spells (as they are not binded to any class)', null=True)),
                ('verified', models.BooleanField(default=False)),
                ('verified_time', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='SpellClassLevel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level', models.PositiveSmallIntegerField()),
                ('extra', models.CharField(blank=True, max_length=32)),
                ('character_class', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dnd.CharacterClass')),
                ('spell', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dnd.Spell')),
            ],
            options={
                'ordering': ['spell', 'level'],
            },
        ),
        migrations.CreateModel(
            name='SpellDescriptor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=64, unique=True)),
                ('slug', models.SlugField(max_length=64, unique=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='SpellDomainLevel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level', models.PositiveSmallIntegerField()),
                ('extra', models.CharField(blank=True, max_length=32)),
                ('domain', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dnd.Domain')),
                ('spell', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dnd.Spell')),
            ],
            options={
                'ordering': ['spell', 'level'],
            },
        ),
        migrations.CreateModel(
            name='SpellSchool',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32, unique=True)),
                ('slug', models.SlugField(max_length=32, unique=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='SpellSubSchool',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32, unique=True)),
                ('slug', models.SlugField(max_length=32, unique=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='StaticPage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32, unique=True)),
                ('body', models.TextField(help_text='Textile enabled!')),
                ('body_html', models.TextField(editable=False)),
            ],
        ),
        migrations.CreateModel(
            name='TextFeatPrerequisite',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(max_length=256)),
                ('feat', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dnd.Feat')),
            ],
            options={
                'ordering': ['text'],
            },
        ),
        migrations.AddField(
            model_name='spell',
            name='class_levels',
            field=models.ManyToManyField(through='dnd.SpellClassLevel', to='dnd.CharacterClass'),
        ),
        migrations.AddField(
            model_name='spell',
            name='descriptors',
            field=models.ManyToManyField(blank=True, to='dnd.SpellDescriptor'),
        ),
        migrations.AddField(
            model_name='spell',
            name='domain_levels',
            field=models.ManyToManyField(through='dnd.SpellDomainLevel', to='dnd.Domain'),
        ),
        migrations.AddField(
            model_name='spell',
            name='rulebook',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dnd.Rulebook'),
        ),
        migrations.AddField(
            model_name='spell',
            name='school',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dnd.SpellSchool'),
        ),
        migrations.AddField(
            model_name='spell',
            name='sub_school',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dnd.SpellSubSchool'),
        ),
        migrations.AddField(
            model_name='spell',
            name='verified_author',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='rule',
            name='rulebook',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dnd.Rulebook'),
        ),
        migrations.AddField(
            model_name='racespeed',
            name='type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dnd.RaceSpeedType'),
        ),
        migrations.AddField(
            model_name='race',
            name='race_type',
            field=models.ForeignKey(blank=True, help_text='Pick from list. Hit Die, Attack bonus and Saves are calculated automatically.', null=True, on_delete=django.db.models.deletion.CASCADE, to='dnd.RaceType'),
        ),
        migrations.AddField(
            model_name='race',
            name='rulebook',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dnd.Rulebook'),
        ),
        migrations.AddField(
            model_name='race',
            name='size',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dnd.RaceSize'),
        ),
        migrations.AddField(
            model_name='monsterspeed',
            name='type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dnd.RaceSpeedType'),
        ),
        migrations.AddField(
            model_name='monsterhasskill',
            name='skill',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dnd.Skill'),
        ),
        migrations.AddField(
            model_name='monster',
            name='rulebook',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dnd.Rulebook'),
        ),
        migrations.AddField(
            model_name='monster',
            name='size',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='dnd.RaceSize'),
        ),
        migrations.AddField(
            model_name='monster',
            name='subtypes',
            field=models.ManyToManyField(blank=True, to='dnd.MonsterSubtype'),
        ),
        migrations.AddField(
            model_name='monster',
            name='type',
            field=models.ForeignKey(help_text='Subtypes at the bottom of page', on_delete=django.db.models.deletion.CASCADE, to='dnd.MonsterType'),
        ),
        migrations.AddField(
            model_name='item',
            name='activation',
            field=models.ForeignKey(blank=True, help_text='Leave blank for —. Not for Mundane Items.', null=True, on_delete=django.db.models.deletion.CASCADE, to='dnd.ItemActivationType'),
        ),
        migrations.AddField(
            model_name='item',
            name='aura',
            field=models.ForeignKey(blank=True, help_text='Not for Mundane Items.', null=True, on_delete=django.db.models.deletion.CASCADE, to='dnd.ItemAuraType'),
        ),
        migrations.AddField(
            model_name='item',
            name='aura_schools',
            field=models.ManyToManyField(blank=True, help_text='Not for Mundane Items.', to='dnd.SpellSchool'),
        ),
        migrations.AddField(
            model_name='item',
            name='body_slot',
            field=models.ForeignKey(blank=True, help_text='Only Mundane and Magic Items.', null=True, on_delete=django.db.models.deletion.CASCADE, to='dnd.ItemSlot'),
        ),
        migrations.AddField(
            model_name='item',
            name='property',
            field=models.ForeignKey(blank=True, help_text='Only Armor and Magic Enhancements.', null=True, on_delete=django.db.models.deletion.CASCADE, to='dnd.ItemProperty'),
        ),
        migrations.AddField(
            model_name='item',
            name='required_feats',
            field=models.ManyToManyField(blank=True, limit_choices_to={'feat_categories__slug': 'item-creation'}, to='dnd.Feat'),
        ),
        migrations.AddField(
            model_name='item',
            name='required_spells',
            field=models.ManyToManyField(blank=True, to='dnd.Spell'),
        ),
        migrations.AddField(
            model_name='item',
            name='rulebook',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dnd.Rulebook'),
        ),
        migrations.AddField(
            model_name='item',
            name='synergy_prerequisite',
            field=models.ForeignKey(blank=True, help_text='Only Armor and Magic Enhancements.', limit_choices_to={'type': 'ENH'}, null=True, on_delete=django.db.models.deletion.CASCADE, to='dnd.Item'),
        ),
        migrations.AddField(
            model_name='featspecialfeatprerequisite',
            name='special_feat_prerequisite',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dnd.SpecialFeatPrerequisite'),
        ),
        migrations.AddField(
            model_name='featrequiresskill',
            name='skill',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dnd.Skill'),
        ),
        migrations.AddField(
            model_name='feat',
            name='feat_categories',
            field=models.ManyToManyField(to='dnd.FeatCategory'),
        ),
        migrations.AddField(
            model_name='feat',
            name='rulebook',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dnd.Rulebook'),
        ),
        migrations.AddField(
            model_name='feat',
            name='special_feat_prerequisites',
            field=models.ManyToManyField(through='dnd.FeatSpecialFeatPrerequisite', to='dnd.SpecialFeatPrerequisite'),
        ),
        migrations.AddField(
            model_name='domainvariant',
            name='rulebook',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dnd.Rulebook'),
        ),
        migrations.AddField(
            model_name='deity',
            name='favored_weapon',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dnd.Item'),
        ),
        migrations.AddField(
            model_name='characterclassvariantrequiresskill',
            name='skill',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dnd.Skill'),
        ),
        migrations.AddField(
            model_name='characterclassvariantrequiresrace',
            name='race',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dnd.Race'),
        ),
        migrations.AddField(
            model_name='characterclassvariantrequiresfeat',
            name='feat',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dnd.Feat'),
        ),
        migrations.AddField(
            model_name='characterclassvariant',
            name='class_skills',
            field=models.ManyToManyField(blank=True, to='dnd.Skill'),
        ),
        migrations.AddField(
            model_name='characterclassvariant',
            name='rulebook',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dnd.Rulebook'),
        ),
        migrations.AlterUniqueTogether(
            name='spelldomainlevel',
            unique_together={('domain', 'spell')},
        ),
        migrations.AlterUniqueTogether(
            name='spellclasslevel',
            unique_together={('character_class', 'spell')},
        ),
        migrations.AlterUniqueTogether(
            name='spell',
            unique_together={('name', 'rulebook')},
        ),
        migrations.AlterUniqueTogether(
            name='skillvariant',
            unique_together={('skill', 'rulebook')},
        ),
        migrations.AlterUniqueTogether(
            name='race',
            unique_together={('name', 'rulebook')},
        ),
        migrations.AlterUniqueTogether(
            name='monster',
            unique_together={('name', 'rulebook')},
        ),
        migrations.AlterUniqueTogether(
            name='characterclassvariant',
            unique_together={('character_class', 'rulebook')},
        ),
    ]
